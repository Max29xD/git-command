---
import ClipboardCopy from '$/components/buttons/ClipboardCopy.astro'
import Layout from '$/layouts/Layout.astro'
import { translateCategory } from '$/lib/translates'
import { capitalize } from '$/lib/utils'
import { getCollection } from 'astro:content'
import { cn } from '$/lib/utils'

export async function getStaticPaths() {
  const commandFiles = await getCollection('commands')

  const commands = commandFiles.map(file => ({ ...file.data, slug: file.slug }))

  return commands.map(({ slug, ...rest }) => {
    return {
      params: { slug },
      props: { slug, ...rest }
    }
  })
}

const {
  command,
  examples,
  notes,
  category,
  description,
  usage,
  difficulty,
  warnings,
  tips,
  related
} = Astro.props
---

<Layout
  title={`${capitalize(command)} | Comandos de Git`}
  description={description}
>
  <main class="container mx-auto px-8 py-12">
    <article class="prose prose-invert mx-auto max-w-3xl">
      <div class="mb-6 flex flex-col items-center gap-y-2">
        <h1
          class="bg-gradient-to-r from-violet-500 to-violet-300 bg-clip-text text-center text-5xl !leading-[1.4] font-bold text-transparent"
          transition:name={command}
        >
          {command}
        </h1>
        <div class="flex flex-wrap justify-center gap-2">
          <span
            class="rounded-full bg-violet-400/10 px-3 py-1 text-sm text-violet-300"
            transition:name={category.toString()}
          >
            {translateCategory(category.toString())}
          </span>
          <span
            class={cn('rounded-full px-3 py-1 text-sm', {
              'bg-green-400/10 text-green-300': difficulty === 'beginner',
              'bg-yellow-400/10 text-yellow-300': difficulty === 'intermediate',
              'bg-red-400/10 text-red-300': difficulty === 'advanced'
            })}
          >
            {translateCategory(difficulty.toString())}
          </span>
        </div>
      </div>
      <div class="flex flex-col gap-y-6">
        <p
          class="text-silver-100 text-lg"
          transition:name={description}
        >
          {description}
        </p>
        <section class="flex flex-col gap-y-2">
          <h2 class="text-silver-50 text-2xl font-semibold">Uso</h2>
          <code
            class="flex items-center justify-between gap-x-2 rounded-xl bg-violet-400/10 px-4 py-2"
          >
            {usage}
            <ClipboardCopy dataCopy={usage} />
          </code>
        </section>
        <section class="flex flex-col gap-y-2">
          <h2 class="text-silver-50 text-2xl font-semibold">Ejemplos</h2>
          <ul
            class="border-silver-700 flex flex-col gap-y-2 rounded-xl border-2 p-4"
          >
            {
              examples?.map(({ cmd, desc, level }) => (
                <li
                  class={cn('rounded-[inherit] p-4', {
                    'bg-violet-500/10': level === 'advanced',
                    'bg-violet-400/20': level === 'basic'
                  })}
                >
                  <code class={cn('text-lg font-bold text-violet-300')}>
                    {cmd}
                  </code>
                  <p class="text-silver-100">{desc}</p>
                  {level && (
                    <span
                      class={cn(
                        'mt-2 inline-block rounded-full px-2 py-0.5 text-xs',
                        {
                          'bg-violet-500/20 text-violet-300':
                            level === 'advanced',
                          'bg-violet-400/20 text-violet-200': level === 'basic'
                        }
                      )}
                    >
                      {level}
                    </span>
                  )}
                </li>
              ))
            }
          </ul>
        </section>
        {
          notes && (
            <section class="flex flex-col gap-y-2">
              <h2 class="text-silver-50 text-2xl font-semibold">Notas</h2>
              <ul class="list-disc pl-4">
                {notes.map(note => (
                  <li class="text-silver-100">{note}</li>
                ))}
              </ul>
            </section>
          )
        }
        {
          warnings && (
            <section class="flex flex-col gap-y-2">
              <h2 class="text-silver-50 text-2xl font-semibold">
                Advertencias
              </h2>
              <ul class="list-disc pl-4">
                {warnings.map(warning => (
                  <li class="text-red-300">{warning}</li>
                ))}
              </ul>
            </section>
          )
        }
        {
          tips && (
            <section class="flex flex-col gap-y-2">
              <h2 class="text-silver-50 text-2xl font-semibold">Consejos</h2>
              <ul class="list-disc pl-4">
                {tips.map(tip => (
                  <li class="text-green-300">{tip}</li>
                ))}
              </ul>
            </section>
          )
        }
        {
          related && (
            <section class="flex flex-col gap-y-2">
              <h2 class="text-silver-50 text-2xl font-semibold">
                Comandos Relacionados
              </h2>
              <div class="flex flex-wrap gap-2">
                {related.map(cmd => (
                  <a
                    href={`/command/${cmd}`}
                    class="rounded-full bg-violet-400/10 px-3 py-1 text-sm text-violet-300 hover:bg-violet-400/20"
                  >
                    git {cmd}
                  </a>
                ))}
              </div>
            </section>
          )
        }
      </div>
    </article>
  </main>
</Layout>
